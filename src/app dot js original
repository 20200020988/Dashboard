import React, { useState } from 'react';
import { getUsers, getUser, deleteUser, updateUser } from './apiService';

function App() {
  const [user, setUser] = useState(null);
  const [userId, setUserId] = useState('');
  const [usersList, setUsersList] = useState([]);
  const [showUserList, setShowUserList] = useState(false);
  const [editUserId, setEditUserId] = useState(null); // Track which user is being edited
  const [editedUserData, setEditedUserData] = useState({
    first_name: '',
    last_name: '',
    email: '',
  });

  const handleSearchUser = () => {
    if (userId.trim() !== '') {
      getUser(userId)
        .then(data => {
          setUser(editUserId === data.id ? { ...data, ...editedUserData } : data);
        })
        .catch(error => console.error('Error fetching user:', error));
    }
  };
  
  const handleFetchUsersList = () => {
    getUsers()
      .then(data => {
        setUsersList(data);
        setShowUserList(true);
      })
      .catch(error => console.error('Error fetching users:', error));
  };

  const handleDeleteUser = async (userIdToDelete) => {
    try {
      await deleteUser(userIdToDelete);
      const updatedUsersList = usersList.filter(user => user.id !== userIdToDelete);
      setUsersList(updatedUsersList);
    } catch (error) {
      console.error('Error deleting user:', error);
    }
  };

  const handleEditClick = (user) => {
    setEditUserId(user.id);
    setEditedUserData({
      first_name: user.first_name,
      last_name: user.last_name,
      email: user.email,
    });
  };

  const handleEditUser = async (userIdToEdit) => {
    try {
      await updateUser(userIdToEdit, editedUserData);
      const updatedUsersList = usersList.map(user => {
        if (user.id === userIdToEdit) {
          return { ...user, ...editedUserData };
        }
        return user;
      });
      setUsersList(updatedUsersList);
  
      // Check if the currently displayed user is being edited
      if (user && user.id === userIdToEdit) {
        setUser({ ...user, ...editedUserData });
      }
  
      setEditUserId(null); // Exit editing mode
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };
  
  return (
    <div className="App">
      <h1>Reqres User App</h1>

      <div>
        <input
          type="text"
          placeholder="Enter User ID"
          value={userId}
          onChange={(e) => setUserId(e.target.value)}
        />
        <button onClick={handleSearchUser}>Search User</button>
      </div>

      {user && (
        <div>
        <h2>User Details</h2>
        <p>Name: {user.first_name} {user.last_name}</p>
        <p>Email: {user.email}</p>
        <p>Avatar: <img src={user.avatar} alt="Avatar" /></p>
        </div>
      )}

      <div>
        <button onClick={handleFetchUsersList}>Fetch User List</button>
        {showUserList && (
          <table>
            {/* ... (table headers) ... */}
            <tbody>
              {usersList.map(user => (
                <tr key={user.id}>
                  <td>{user.id}</td>
                  <td>{user.first_name}</td>
                  <td>{user.last_name}</td>
                  <td>{user.email}</td>
                  <td>
                    {editUserId === user.id ? (
                      <div>
                        <input
                          type="text"
                          placeholder="First Name"
                          value={editedUserData.first_name}
                          onChange={(e) =>
                            setEditedUserData({ ...editedUserData, first_name: e.target.value })
                          }
                        />
                        <input
                          type="text"
                          placeholder="Last Name"
                          value={editedUserData.last_name}
                          onChange={(e) =>
                            setEditedUserData({ ...editedUserData, last_name: e.target.value })
                          }
                        />
                        <input
                          type="email"
                          placeholder="Email"
                          value={editedUserData.email}
                          onChange={(e) =>
                            setEditedUserData({ ...editedUserData, email: e.target.value })
                          }
                        />
                        <button onClick={() => handleEditUser(user.id)}>Save</button>
                      </div>
                    ) : (
                      <div>
                        <button onClick={() => handleDeleteUser(user.id)}>Delete</button>
                        <button onClick={() => handleEditClick(user)}>Edit</button>
                      </div>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>

      <div>
        {/* ... (other elements) ... */}
      </div>
    </div>
  );
}

export default App;
